set-window-option -g mode-keys vi

set -g history-limit 100000

setw -g aggressive-resize on

set -g set-titles on
set -g set-titles-string "#h: #W"

set -g monitor-activity on
set -g activity-action any

set -g base-index 1
setw -g pane-base-index 1
setw -g renumber-windows on

# Status Bar config. It's crazy how much actions you need to make it have
# 2 rows, each configuref in its own way. And even then i couldn't invent
# the way to color them differently. Seems like, while layout for each
# row can be customized to show whatever you need, a color is global for
# all rows. Though, you can paint tmux bar text elements background color
# like window-status.

set-option -g status-position top
set -g status-style bg=default
set -g status-interval 2

# Display whatever you want when the window is zoomed or not zoomed
#   - zoomed = '+' 
#   - not zoomed = ' '
set -g window-status-format " #I #W#{?window_zoomed_flag,+Z, } "
set -g window-status-current-format "#[bg=yellow]#[fg=black][#[fg=black]#[bg=yellow]#I:#W#{?window_zoomed_flag,+Z, }#[bg=yellow]#[fg=black]]"
set -g window-status-activity-style "italics"
set -g window-status-style 'bg=default fg=default'

set -g status-justify centre
set -g status-left ' #(hostname)'
set -g status-left-length 15
set -g status-right '%H:%M  '

if -F '#{!=:#{status},2}' {
    set -g status 2
    # This forces bottom status row to inherit global status format
    # rules. If you won't do this it will cast default content into the
    # bottom row: like, the size of a currently opened theme.
    set -Fg 'status-format[1]' '#{status-format[0]}'
    # Funny enough - this doesnt paint bg in red. It is here just because tmux
    # need any format command for a bottom row to overwrite format directives
    # from a global(the one without index) format directive.
    set -g 'status-format[1]' '#[bg=red]'
}

# Configure copy-paste shortcuts for copying something from tmux copy-mode to system clipboard. In case you
# would need to copy something NOT from vim itself, but from command-line output. And at the same time you want to
# have controls like in vim visual mode.
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'

# Set new panes to open in current directory instead of $HOME
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# Enable full mouse support. It feels like shit to be honest. Why would
# I need to scroll my buffer via mouse or touchpad gestures - especially
# touchpad gestures -  while vi-keys mode has pretty decent scroll-by-page bindings:
# C-u and C-d? Anyways let it stay there just in case I will need it somehow in the future.
# set -g mouse on

# Reload the tmux config. Tmux cant autocomplete paths natively, so every
# time I reload a config, I cast `<C-b>:source-file ~/.tmux.conf by hand`,
# which is long-enough action to create a shortcut.
bind-key r source-file ~/.tmux.conf
